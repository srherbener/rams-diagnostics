#!/usr/bin/env perl
#
# Script to run various diagnostics
#

BEGIN { push(@INC, "$ENV{HOME}/etc/perl"); }

use strict;
use File::Basename;
use DiagUtils;

#################################################################
# SUBROUTINES
#################################################################

#################################################################
# BuildDiagArgs()
#
# This routine will build the argument list for $Diag
#
sub BuildDiagArgList
  {
  my ($Diag, $Case, $Tdir, $Gvar, $Args) = @_;

  my @DiagArgs;

  my $Var;
  my $DiagVar;
  my @InGvars;
  my $InFile;
  my $InFiles;
  my $OutBase;
  my $OutBaseTan;
  my $OutBaseRad;
  my $GvarRwinds;
  my $Zlevel;

  undef (@DiagArgs);

  if ($Diag eq "colint")
    {
    # colint <InFiles> <OutFileBase> <Var>
    # $@Args --> <Var>,  followed by list of input grads vars
    #
    # Use $Gvar, $Case, $Tdir to form <OutBase>
    # Use list of input grads vars to form <InFiles>
    ($DiagVar, @InGvars) = @$Args;

    $InFiles = "";
    foreach $Var (@InGvars) 
      {
      $InFiles = &DiagUtils::AppendGradsVarFile($InFiles, $Case, $Tdir, $Var);
      }

    $OutBase = "GRADS/" . $Tdir . "/" . $Gvar . "_" . $Case;

    @DiagArgs = ( $InFiles, $OutBase, $DiagVar );
    }
  elsif ($Diag eq "sfcwind")
    {
    # sfcwind <InFiles> <OutFileBase>
    # $@Args --> list of input grads vars
    #
    # Use $Gvar, $Case, $Tdir to form <OutBase>
    # Use list of input grads vars to form <InFiles>
 
    @InGvars = @$Args;

    $InFiles = "";
    foreach $Var (@InGvars)
      {
      $InFiles = &DiagUtils::AppendGradsVarFile($InFiles, $Case, $Tdir, $Var);
      }

    $OutBase = "GRADS/" . $Tdir . "/" . $Gvar . "_" . $Case;

    @DiagArgs = ( $InFiles, $OutBase );
    }
  elsif ($Diag eq "hslice")
    {
    # hslice <InFiles> <OutFileBase> <Var> <Zlevel>
    # $@Args --> diagnostic var, z level
    #
    # Use $Gvar, $Case, $Tdir to form <OutBase>
    # Use list of input grads vars to form <InFiles>
 
    ($DiagVar, $Zlevel) = @$Args;

    $InFiles = &DiagUtils::AppendGradsVarFile("", $Case, $Tdir, $DiagVar);

    $OutBase = "GRADS/" . $Tdir . "/" . $Gvar . "_" . $Case;

    @DiagArgs = ( $InFiles, $OutBase, $DiagVar, $Zlevel );
    }
  elsif ($Diag eq "tr_winds")
    {
    # tr_winds <InFiles> <OutFileBaseTanWinds> <OutFilesBaseRadWinds>
    # $@Args --> radial winds GRADS var, list of input grads vars
    # $Gva holds tangential winds GRADS var
    #
    # Use $Gvar, $Case, $Tdir to form <OutBase>
    # Use list of input grads vars to form <InFiles>
 
    ($GvarRwinds, @InGvars) = @$Args;

    $InFiles = "";
    foreach $Var (@InGvars)
      {
      $InFiles = &DiagUtils::AppendGradsVarFile($InFiles, $Case, $Tdir, $Var);
      }

    $OutBaseTan = "GRADS/" . $Tdir . "/" . $Gvar . "_" . $Case;
    $OutBaseRad = "GRADS/" . $Tdir . "/" . $GvarRwinds . "_" . $Case;

    @DiagArgs = ( $InFiles, $OutBaseTan, $OutBaseRad );
    }
  else
   {
   print "WARNING: BuildDiagArgList: unrecognized diagnostic: $Diag\n";
   print "WARNING: skipping diagnostic\n";
   }


  return (\@DiagArgs);
  }
#################################################################
# MAIN
#################################################################

my $ConfigFile;

my $Cases;
my $TimeDirs;
my $Vars;
my $AzavgDiags; 
my $Diags;

my $Case;
my $Tdir;
my $Diag;
my $Gvar;
my @Args;
my $DiagArgs;
my $Gfile;

my @SysArgs;
my $OutDir;
my $GradsControlFile;

$ConfigFile = $ARGV[0];

print "ConfigFile: $ConfigFile\n";

# read in info from the config file
($Cases, $TimeDirs, $Vars, $AzavgDiags, $Diags) = &DiagUtils::ReadConfigFile($ConfigFile);

# walk through the cases and time dirs and submit the diagnostics
foreach $Case (sort(keys(%$Cases)))
  {
  foreach $Tdir (sort(keys(%$TimeDirs)))
    {
    foreach $Diag (sort(keys(%$Diags)))
      {
      foreach $Gvar (sort(keys(%{ $$Diags{$Diag} })))
        {
        @Args =  @{$$Diags{$Diag}{$Gvar}};

        print "***************************************************************\n";
        print "Running diagnostic: $Diag\n";
        print "  Grads Variable: $Gvar\n";
        print "  Case: $Case\n";
        print "  Time Directory: $Tdir\n";
        print "  Diagnostic Argument List: @Args\n";

        # The second argument is always a path to an output GRADS file, so use
        # this to determine if the output directory needs to be built.
        ($DiagArgs) = &BuildDiagArgList($Diag, $Case, $Tdir, $Gvar, \@Args);

        # output GRADS file prefix is in $$DiagArgs[1]
        $OutDir = dirname($$DiagArgs[1]);
        if (! -d $OutDir)
          {
          @SysArgs = ("mkdir", "-p", $OutDir);
          system(@SysArgs);
          }

        @SysArgs = ($Diag, @$DiagArgs);
        print "  Command: @SysArgs\n";
        system(@SysArgs);

        # fix paths and var names in the output GRADS control file
        ($GradsControlFile) = &DiagUtils::FindGradsControlFile($$DiagArgs[1]);
        &DiagUtils::FixGradsControlFile($GradsControlFile, $OutDir, $Gvar);
        }
      }
    }
  }
