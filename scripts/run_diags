#!/usr/bin/env perl
#
# Script to run various diagnostics
#

BEGIN { push(@INC, "$ENV{HOME}/etc/perl"); }

use strict;
use File::Basename;
use DiagUtils;

#################################################################
# SUBROUTINES
#################################################################

#################################################################
# BuildDiagArgs()
#
# This routine will build the argument list for $Diag
#
sub BuildDiagArgList
  {
  my ($Diag, $Case, $Tdir, $Gvar, $Args) = @_;

  my @DiagArgs;

  my $Var;
  my $DiagVar;
  my @InGvars;
  my $InFile;
  my $InFiles;
  my $OutBase;
  my $OutBaseTan;
  my $OutBaseRad;
  my $GvarRwinds;

  undef (@DiagArgs);

  if ($Diag eq "colint")
    {
    # colint <InFiles> <OutFileBase> <Var>
    # $@Args --> <Var>,  followed by list of input grads vars
    #
    # Use $Gvar, $Case, $Tdir to form <OutBase>
    # Use list of input grads vars to form <InFiles>
    ($DiagVar, @InGvars) = @$Args;

    $InFiles = "";
    foreach $Var (@InGvars) 
      {
      $InFiles = &DiagUtils::AppendGradsVarFile($InFiles, $Case, $Tdir, $Var);
      }

    $OutBase = "GRADS/" . $Tdir . "/" . $Gvar . "_" . $Case;

    @DiagArgs = ( $InFiles, $OutBase, $DiagVar );
    }
  elsif ($Diag eq "sfcwind")
    {
    # sfcwind <InFiles> <OutFileBase>
    # $@Args --> list of input grads vars
    #
    # Use $Gvar, $Case, $Tdir to form <OutBase>
    # Use list of input grads vars to form <InFiles>
 
    @InGvars = @$Args;

    $InFiles = "";
    foreach $Var (@InGvars)
      {
      $InFiles = &DiagUtils::AppendGradsVarFile($InFiles, $Case, $Tdir, $Var);
      }

    $OutBase = "GRADS/" . $Tdir . "/" . $Gvar . "_" . $Case;

    @DiagArgs = ( $InFiles, $OutBase );
    }
  elsif ($Diag eq "tr_winds")
    {
    # tr_winds <InFiles> <OutFileBaseTanWinds> <OutFilesBaseRadWinds>
    # $@Args --> radial winds GRADS var, list of input grads vars
    # $Gva holds tangential winds GRADS var
    #
    # Use $Gvar, $Case, $Tdir to form <OutBase>
    # Use list of input grads vars to form <InFiles>
 
    ($GvarRwinds, @InGvars) = @$Args;

    $InFiles = "";
    foreach $Var (@InGvars)
      {
      $InFiles = &DiagUtils::AppendGradsVarFile($InFiles, $Case, $Tdir, $Var);
      }

    $OutBaseTan = "GRADS/" . $Tdir . "/" . $Gvar . "_" . $Case;
    $OutBaseRad = "GRADS/" . $Tdir . "/" . $GvarRwinds . "_" . $Case;

    @DiagArgs = ( $InFiles, $OutBaseTan, $OutBaseRad );
    }
  else
   {
   print "WARNING: BuildDiagArgList: unrecognized diagnostic: $Diag\n";
   print "WARNING: skipping diagnostic\n";
   }


  return (\@DiagArgs);
  }
#################################################################
# MAIN
#################################################################

my $ConfigFile;

my $Cases;
my $TimeDirs;
my $Vars;
my $AzavgDiags; 
my $Diags;

my $Case;
my $Tdir;
my $Diag;
my $Gvar;
my @Args;
my $DiagArgs;
my $Gfile;

my @SysArgs;
my $OutDir;

$ConfigFile = $ARGV[0];

print "ConfigFile: $ConfigFile\n";

# read in info from the config file
($Cases, $TimeDirs, $Vars, $AzavgDiags, $Diags) = &DiagUtils::ReadConfigFile($ConfigFile);

# walk through the cases and time dirs and submit the diagnostics
foreach $Case (sort(keys(%$Cases)))
  {
  foreach $Tdir (sort(keys(%$TimeDirs)))
    {
    foreach $Diag (sort(keys(%$Diags)))
      {
      foreach $Gvar (sort(keys(%{ $$Diags{$Diag} })))
        {
        @Args =  @{$$Diags{$Diag}{$Gvar}};

        print "***************************************************************\n";
        print "Running diagnostic: $Diag\n";
        print "  Grads Variable: $Gvar\n";
        print "  Case: $Case\n";
        print "  Time Directory: $Tdir\n";
        print "  Diagnostic Argument List: @Args\n";

        # The second argument is always a path to an output GRADS file, so use
        # this to determine if the output directory needs to be built.
        ($DiagArgs) = &BuildDiagArgList($Diag, $Case, $Tdir, $Gvar, \@Args);

        $OutDir = dirname($$DiagArgs[1]);
        if (! -d $OutDir)
          {
          @SysArgs = ("mkdir", "-p", $OutDir);
          system(@SysArgs);
          }

        @SysArgs = ($Diag, @$DiagArgs);
        print "  Command: @SysArgs\n";
        system(@SysArgs);
        }
      }
    }
  }


### Cases="SA0SC0 SA0SC1 SA1SC0 SA1SC1 SA0SC0_NR SA0SC1_NR SA10SC0 SA10SC1"
### Tdirs="T1 T2"
### NW2SE="1:201:207:1"  # grid3 coords from NW corner to SE corner
### Npts="300" # roughly the grid resolution, sqrt(201**2 + 207**2) -> ~290
### Zlevel=7 # closest lev (2334.544) to 2500m which is vertical center of injected CCN
### NumRbands=6  # number of radial bands for the cfad dataset build
### BinFilterMin="-1.0"
### BinFilterMax="1.0"
### 
### for case in $Cases
### do
###   for Tdir in $Tdirs
###   do
###     # each var is in a separate file that starts with the var name
###   
###     u_file="${case}/GRADS/${Tdir}/u-${case}-AS-1998-08-22-120000-g3.ctl"
###     v_file="${case}/GRADS/${Tdir}/v-${case}-AS-1998-08-22-120000-g3.ctl"
###     p_file="${case}/GRADS/${Tdir}/press-${case}-AS-1998-08-22-120000-g3.ctl"
###     dens_file="${case}/GRADS/${Tdir}/dn0-${case}-AS-1998-08-22-120000-g3.ctl"
###     liq_file="${case}/GRADS/${Tdir}/liquid-${case}-AS-1998-08-22-120000-g3.ctl"
###     ice_file="${case}/GRADS/${Tdir}/ice-${case}-AS-1998-08-22-120000-g3.ctl"
###     ccn_file="${case}/GRADS/${Tdir}/ccn_concen-${case}-AS-1998-08-22-120000-g3.ctl"
###     gccn_file="${case}/GRADS/${Tdir}/gccn_concen-${case}-AS-1998-08-22-120000-g3.ctl"
###     temp_file="${case}/GRADS/${Tdir}/tempc-${case}-AS-1998-08-22-120000-g3.ctl"
###   
###     # Generate
###     #  column integration of liquid
###     #  column integration of ice
###     #  surface wind speeds
###     #  vertical slices (NW to SE) of:
###     #    thetae
###     #    gccn
###     #    ccn
###     #    liquid (see where supercooled water is)
###     # horizontal slices (z = 7, lev = 2334.544)
###     #    gccn
###     #    ccn
###   
###     # column integration needs density (dn0) and the variable to integrate (ice, liquid)
###     # surface wind speed needs horizontal winds (u, v)
###     # vertical slice needs only the variable to extract (thetae, gccnconcen, ccnconcen)
###     # horizontal slice needs only the variable to extract (thetae, gccnconcen, ccnconcen)
###   
###     colint ${dens_file}:${temp_file}:${liq_file} GRADS/${Tdir}/cint_liq_${case} liquid
###     colint ${dens_file}:${temp_file}:${ice_file} GRADS/${Tdir}/cint_ice_${case} ice
###   
###     sfcwind ${u_file}:${v_file} GRADS/${Tdir}/sfc_wind_${case}
### ###   
### ###   # storm moves off center -> these aren't valid since they don't intersect storm center
### ###   #  vslice ${gf2} GRADS/${Tdir}/vslice_nw2se_thetae_${case} thetae     ${NW2SE} ${Npts}
### ###   #  vslice ${gf4} GRADS/${Tdir}/vslice_nw2se_gccn_${case}   gccnconcen ${NW2SE} ${Npts}
### ###   #  vslice ${gf4} GRADS/${Tdir}/vslice_nw2se_ccn_${case}    ccnconcen  ${NW2SE} ${Npts}
### ###   #  vslice ${gf3} GRADS/${Tdir}/vslice_nw2se_liq_${case}    liquid     ${NW2SE} ${Npts}
### ###   
###     hslice ${gccn_file} GRADS/${Tdir}/hslice_2334_gccn_${case}   gccnconc   ${Zlevel}
###     hslice ${ccn_file}  GRADS/${Tdir}/hslice_2334_ccn_${case}    ccnconcen  ${Zlevel}
###     hslice ${temp_file}  GRADS/${Tdir}/hslice_sfc_tempc_${case}   tempc      1
###   
### ###     cfad ${gf1} GRADS/${Tdir}/cfad_w_${case} ${NumRbands} ${BinFilterMin} ${BinFilterMax} w
###   
###     colint ${dens_file}:${temp_file}:${liq_file} GRADS/${Tdir}/cint_liq_sc_${case} liquid_s
###     colint ${dens_file}:${temp_file}:${liq_file} GRADS/${Tdir}/cint_liq_wr_${case} liquid_w
###   
###     tr_winds ${p_file}:${u_file}:${v_file} GRADS/${Tdir}/storm_winds_tan_${case} GRADS/${Tdir}/storm_winds_rad_${case}
###   done
### done
