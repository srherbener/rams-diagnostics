#!/usr/bin/env perl
#
# script to run grads to generate data plots using GRADS
#

BEGIN { push(@INC, "$ENV{HOME}/etc/perl"); }

use strict;
use DiagUtils;

###########################################################################
# SUBROUTINES
###########################################################################

###########################################################################
# SetGradsPlotParams()
#
# This routine will set plotting parameters (contour colors, levels,
# axis labeling, etc.) according to which kind of plot we are doing and
# the particular variable, case, etc. we are working on.
#
sub SetGradsPlotParams
  {
  my ($Ptype, $Gvar, $Gexp, $CaseList, $StartTime, $TimeInc, $Ptime, $Ptstart, $Ptend,
      $Dir, $Pdir, $PfileCase) = @_;

  my $Clevs;
  my $Ccols;
  my $Ptitle;
  my $Xtitle;
  my $Ytitle;
  my $TimeStep;
  my $TstepStart;
  my $TstepEnd;
  my $Gfiles; # ref to list of files
  my $Pfile;

  my $Case;
  my $Fname;

  $TimeStep = int(($Ptime - $StartTime) / $TimeInc) + 1;
  $TstepStart = (($Ptstart - $StartTime) / $TimeInc) + 1;
  $TstepEnd = (($Ptend - $StartTime) / $TimeInc) + 1;

  if ($Ptype eq "AZ")
    {
    $Case = $$CaseList[0];
    $Ccols = "9 14 4 11 5 13 3 10 7 12 8 2 6";
    $Xtitle = "Radius (km)";
    $Ytitle = "Height (m)";
    $$Gfiles[0] = $Dir . "/" . $Gvar . "_" . $Case . ".ctl";
    $Pfile = $Pdir . "/" . $Gvar . "_" . $PfileCase . "_" . $Ptime . ".gif";

    if ($Gvar eq "w")
      {
      $Clevs = "-1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5";
      $Ptitle = $Gexp . ": AZ: w (m/s), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "speed_t")
      {
      $Clevs = "10.0 15.0 20.0 25.0 30.0 35.0 40.0 45.0 50.0 55.0 60.0 65.0 70.0";
      $Ptitle = $Gexp . ": AZ: spd_t (m/s), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "speed_r")
      {
      $Clevs = "-18.0 -15.0 -12.0 -9.0 -6.0 -3.0 0.0 3.0 6.0 9.0 12.0 15.0 18.0";
      $Ptitle = $Gexp . ": AZ: spd_r (m/s), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "liquid")
      {
      $Clevs = "0.0 0.4 0.8 1.2 1.6 2.0 2.4 2.8 3.2 3.6 4.0 4.4 4.8";
      $Ptitle = $Gexp . ": AZ: LWC (g/kg), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "ice")
      {
      $Clevs = "0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4";
      $Ptitle = $Gexp . ": AZ: ice (g/kg), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "gccn_conc")
      {
      $Clevs = "0.00001 0.0001 0.001 0.01 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6";
      $Ptitle = $Gexp . ": AZ: GCCN (#/cc), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "ccn_conc")
      {
      $Clevs = "0.0 50.0 100.0 150.0 200.0 300.0 400.0 500.0 1000.0 1500.0 2000.0 2500.0 3000.0";
      $Ptitle = $Gexp . ": AZ: CCN (#/cc), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "theta_e")
      {
      $Clevs = "348.0 350.0 352.0 354.0 356.0 358.0 360.0 362.0 364.0 366.0 368.0 370.0 372.0";
      $Ptitle = $Gexp . ": AZ: Theta-e (K), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "tempc")
      {
      $Clevs = "18.0 20.0 21.0 22.0 22.5 23.0 23.5 24.0 24.5 25.0 25.5 26.0 26.5";
      $Ptitle = $Gexp . ": AZ: T (C), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "press")
      {
      $Clevs = "740.0 760.0 780.0 800.0 820.0 840.0 860.0 880.0 900.0 920.0 940.0 960.0 980.0";
      $Ptitle = $Gexp . ": AZ: Pressure (mb), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "cloud_cm3")
      {
      $Clevs = "0.0 5.00 10.00 15.00 20.00 25.00 30.00 35.00 40.00 45.00 50.00 55.00 60.00";
      $Ptitle = $Gexp . ": AZ: Cloud Droplet Number (#/cc), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "cloud2_cm3")
      {
      $Clevs = "0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2";
      $Ptitle = $Gexp . ": AZ: Cloud2 Droplet Number (#/cc), " . $Case . ", t " . $Ptime . " hrs";
      }
    }
  elsif ($Ptype eq "HS")
    {
    $Case = $$CaseList[0];
    $Ccols = "9 14 4 11 5 13 3 10 7 12 8 2 6";
    $Xtitle = "Longitude";
    $Ytitle = "Latitude";
    $$Gfiles[0] = $Dir . "/" . $Gvar . "_" . $Case . ".ctl";
    $Pfile = $Pdir . "/" . $Gvar . "_" . $PfileCase . "_" . $Ptime . ".gif";

    if ($Gvar eq "cint_liq")
      {
      $Clevs = "200.0 400.0 600.0 800.0 1000.0 2000.0 4000.0 6000.0 8000.0 10000.0 20000.0 40000.0 60000.0";
      $Ptitle = $Gexp . ": LWP (g/m**2), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "cint_ice")
      {
      $Clevs = "10.0 20.0 40.0 60.0 80.0 100.0 200.0 400.0 600.0 800.0 1000.0 2000.0 4000.0";
      $Ptitle = $Gexp . ": Column integrated ice (g/m**2), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "gccn_z7")
      {
      $Clevs = "0.00001 0.0001 0.001 0.01 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6";
      $Ptitle = $Gexp . ": GCCN (#/cc), z=2300m, " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "ccn_z7")
      {
      $Clevs = "20.0 40.0 60.0 80.0 100.0 200.0 400.0 600.0 800.0 1000.0 2000.0 4000.0 6000.0";
      $Ptitle = $Gexp . ": CCN (#/cc), z=2300m, " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "sfc_wind")
      {
      $Clevs = "15.0 20.0 25.0 30.0 35.0 40.0 45.0 50.0 55.0 60.0 65.0 70.0 75.0";
      $Ptitle = $Gexp . ": Surface wind speed (m/s), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "cint_liq_sc")
      {
      $Clevs = "10.0 20.0 40.0 60.0 80.0 100.0 200.0 400.0 600.0 800.0 1000.0 2000.0 4000.0";
      $Ptitle = $Gexp . ": Supercooled LWP (g/m**2), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "cint_liq_wr")
      {
      $Clevs = "200.0 400.0 600.0 800.0 1000.0 2000.0 4000.0 6000.0 8000.0 10000.0 20000.0 40000.0 60000.0";
      $Ptitle = $Gexp . ": Warm LWP (g/m**2), " . $Case . ", t " . $Ptime . " hrs";
      }
    elsif ($Gvar eq "tempc_sfc")
      {
      $Clevs = "20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0 32.0";
      $Ptitle = $Gexp . ": Sfc Temperature (deg C), " . $Case . ", t " . $Ptime . " hrs";
      }
    }
  elsif (($Ptype eq "TS") || ($Ptype eq "TSM"))
    {
    $Xtitle = "Time";
    foreach $Case (@$CaseList)
      {
      $Fname = $Dir . "/" . $Gvar . "_" . $Case . ".ctl";
      push (@$Gfiles, $Fname);
      }
    $Pfile = $Pdir . "/" . $Gvar . "_" . $PfileCase . ".gif";

    if ($Gvar eq "ts_sc_cloud")
      {
      $Ptitle = $Gexp . ": Total supercooled cloud droplet mass";
      $Ytitle = "SC Cloud Mass (g)";
      }
    elsif ($Gvar eq "ts_csc_cloud")
      {
      $Ptitle = $Gexp . ": Total supercooled cloud droplet mass, storm core";
      $Ytitle = "SC Cloud Mass (g)";
      }
    elsif ($Gvar eq "ts_wr_cloud")
      {
      $Ptitle = $Gexp . ": Total warm cloud droplet mass";
      $Ytitle = "Warm Cloud Mass (g)";
      }
    elsif ($Gvar eq "ts_cwr_cloud")
      {
      $Ptitle = $Gexp . ": Total warm cloud droplet mass, storm core";
      $Ytitle = "Warm Cloud Mass (g)";
      }
    elsif ($Gvar eq "ts_ew_cloud")
      {
      $Ptitle = $Gexp . ": Average cloud droplet conc. near eyewall";
      $Ytitle = "Average N (#/cc)";
      }
    elsif ($Gvar eq "ts_ew_cloud2")
      {
      $Ptitle = $Gexp . ": Average cloud2 droplet conc. near eyewall";
      $Ytitle = "Average N (#/cc)";
      }
    elsif ($Gvar eq "ts_wr_cloud2")
      {
      $Ptitle = $Gexp . ": Total warm cloud2 droplet mass";
      $Ytitle = "Warm Cloud2 Mass (g)";
      }
    elsif ($Gvar eq "ts_cwr_cloud2")
      {
      $Ptitle = $Gexp . ": Total warm cloud2 droplet mass, storm core";
      $Ytitle = "Warm Cloud2 Mass (g)";
      }
    elsif ($Gvar eq "ts_ew_cloud2")
      {
      $Ptitle = $Gexp . ": Average cloud2 droplet conc. near eyewall";
      $Ytitle = "Average N (#/cc)";
      }
    elsif ($Gvar eq "ts_sc_cloud_d")
      {
      $Ptitle = $Gexp . ": Mean supercooled droplet diameter";
      $Ytitle = "SC Cloud Mean Diameter (um)";
      }
    elsif ($Gvar eq "ts_csc_cloud_d")
      {
      $Ptitle = $Gexp . ": Mean supercooled droplet diameter, storm core";
      $Ytitle = "SC Cloud Mean Diameter (um)";
      }
    elsif ($Gvar eq "ts_wr_cloud_d")
      {
      $Ptitle = $Gexp . ": Mean warm droplet diameter";
      $Ytitle = "Warm Cloud Mean Diameter (um)";
      }
    elsif ($Gvar eq "ts_cwr_cloud_d")
      {
      $Ptitle = $Gexp . ": Mean warm droplet diameter, storm core";
      $Ytitle = "Warm Cloud Mean Diameter (um)";
      }
    elsif ($Gvar eq "ts_wr_cloud2_d")
      {
      $Ptitle = $Gexp . ": Mean warm droplet diameter";
      $Ytitle = "Warm Cloud2 Mean Diameter (um)";
      }
    elsif ($Gvar eq "ts_cwr_cloud2_d")
      {
      $Ptitle = $Gexp . ": Mean warm droplet diameter, storm core";
      $Ytitle = "Warm Cloud2 Mean Diameter (um)";
      }
    elsif ($Gvar eq "ts_precipr")
      {
      $Ptitle = $Gexp . ": Precipitation rate";
      $Ytitle = "Precip Rate (kg/hr)";
      }
    elsif ($Gvar eq "ts_w_up")
      {
      $Ptitle = $Gexp . ": Average w in updraft regions";
      $Ytitle = "Average w (m/s)";
      }
    elsif ($Gvar eq "ts_ccn_conc")
      {
      $Ptitle = $Gexp . ": Avg CCN concentration";
      $Ytitle = "Avg CCN Conc (#/cc)";
      }
    elsif ($Gvar eq "ts_horiz_ke")
      {
      $Ptitle = $Gexp . ": Total kinetic energy";
      $Ytitle = "Total KE (J)";
      }
    elsif ($Gvar eq "ts_storm_int")
      {
      $Ptitle = $Gexp . ": Storm intensity metric";
      $Ytitle = "Intensity";
      }
    elsif ($Gvar eq "ts_sc_cloud_dt")
      {
      $Ptitle = $Gexp . ": Total supercooled cloud droplet mass dt";
      $Ytitle = "SC Cloud Mass Rate (g/s)";
      }
    elsif ($Gvar eq "ts_wr_cloud_dt")
      {
      $Ptitle = $Gexp . ": Total warm cloud droplet mass dt";
      $Ytitle = "Warm Cloud Mass Rate (g/s)";
      }
    elsif ($Gvar eq "ts_ew_cloud_dt")
      {
      $Ptitle = $Gexp . ": Average cloud droplet conc. near eyewall dt";
      $Ytitle = "Average N (#/cc/s)";
      }
    elsif ($Gvar eq "ts_wr_cloud2_dt")
      {
      $Ptitle = $Gexp . ": Total warm cloud2 droplet mass dt";
      $Ytitle = "Warm Cloud2 Mass Rate (g/s)";
      }
    elsif ($Gvar eq "ts_ew_cloud2_dt")
      {
      $Ptitle = $Gexp . ": Average cloud2 droplet conc. near eyewall dt";
      $Ytitle = "Average N (#/cc/s)";
      }
    elsif ($Gvar eq "ts_sc_cloud_d_dt")
      {
      $Ptitle = $Gexp . ": Mean supercooled droplet diameter dt";
      $Ytitle = "SC Cloud Mean Diameter Rates (um/s)";
      }
    elsif ($Gvar eq "ts_wr_cloud_d_dt")
      {
      $Ptitle = $Gexp . ": Mean warm droplet diameter dt";
      $Ytitle = "Warm Cloud Mean Diameter Rates (um/s)";
      }
    elsif ($Gvar eq "ts_wr_cloud2_d_dt")
      {
      $Ptitle = $Gexp . ": Mean warm droplet diameter dt";
      $Ytitle = "Warm Cloud2 Mean Diameter Rates (um/s)";
      }
    elsif ($Gvar eq "ts_precipr_dt")
      {
      $Ptitle = $Gexp . ": Precipitation rate dt";
      $Ytitle = "Precip Rate Rates (kg/hr/s)";
      }
    elsif ($Gvar eq "ts_w_up_dt")
      {
      $Ptitle = $Gexp . ": Average w in updraft regions dt";
      $Ytitle = "Average w (m/s/s)";
      }
    elsif ($Gvar eq "ts_ccn_conc_dt")
      {
      $Ptitle = $Gexp . ": Avg CCN concentration, dt";
      $Ytitle = "Avg CCN Conc Rates (#/cc/s)";
      }

    if ($Ptype eq "TS")
      {
      $Ptitle = $Ptitle . ", " . $$CaseList[0];
      }
    }
    
  return ($Clevs, $Ccols, $Ptitle, $Xtitle, $Ytitle, $TimeStep, $TstepStart, $TstepEnd, $Gfiles, $Pfile);
  }

###########################################################################
# MAIN
###########################################################################

my $ConfigFile;

my $Cases;
my $TimeDirs;
my $Vars;
my $AzavgDiags; 
my $Diags;
my $Plots;

my $Gexp;
my $Case;
my $Ptime;
my $Ptstart;
my $Ptend;
my $StartTime;
my $TimeInc;
my $Ptype;
my @Ptimes;
my @Ptypes;
my %Gdirs;
my $Gdir;
my $Pdir;

my $Gvar;
my $Gfiles;
my $TimeStep;
my $TstepStart;
my $TstepEnd;
my $TavgLen;
my $Z1;
my $Z2;
my $Ccols;
my $Clevs;
my $Ptitle;
my $Xtitle;
my $Ytitle;
my $Ymin;
my $Ymax;
my $Pfile;
my $Xlgd;
my $Ylgd;
my $CaseList;
my $PfileCase;

$ConfigFile = $ARGV[0];

%Gdirs = (
  "AZ" => {
          DIR => "AzAveragedData",
          PDIR => "plots/AzAveragedData",
          },
  "HS" => {
          DIR => "GRADS",
          PDIR => "plots/HsliceData",
          },
  "TS" => {
          DIR => "GRADS",
          PDIR => "plots/Misc",
          },
  "TSM" => {
           DIR => "GRADS",
           PDIR => "plots/Misc",
           },
  );

print "ConfigFile: $ConfigFile\n\n";

# read in info from the config file
($Cases, $TimeDirs, $Vars, $AzavgDiags, $Diags, $Plots) = &DiagUtils::ReadConfigFile($ConfigFile);

$Gexp = $$Plots{EXP};
$StartTime = $$Plots{STIME};
$TimeInc = $$Plots{TINC};
@Ptimes = ( @{ $$Plots{TIMES} } );
@Ptypes = ( @{ $$Plots{TYPES} } );
$Ptstart = $$Plots{PTSTART};

print "Experiment: $Gexp\n";
print "Start Time: $StartTime\n";
print "End Time: $TimeInc\n";
print "Plot Times: @Ptimes\n";
print "Plot Types: @Ptypes\n";
print "\n";

foreach $Ptype (@Ptypes)
  {
  $Gdir = $Gdirs{$Ptype}{DIR};
  $Pdir = $Gdirs{$Ptype}{PDIR};
  if (! -d $Pdir)
    {
    system( "mkdir", "-p", $Pdir);
    }

  if (($Ptype eq "AZ") || ($Ptype eq "HS") || ($Ptype eq "TS"))
    {
    foreach $Case (sort(keys(%$Cases)))
      {
      @$CaseList = ( $Case );
      $PfileCase = $Case;
      foreach $Gvar (sort(keys(%{ $$Plots{$Ptype}{VARS} })))
        {
        if (($Ptype eq "AZ") || ($Ptype eq "HS"))
          {
          foreach $Ptime (@Ptimes)
            {
            ($Clevs, $Ccols, $Ptitle, $Xtitle, $Ytitle, $TimeStep, $TstepStart, $TstepEnd, $Gfiles, $Pfile) =
                &SetGradsPlotParams($Ptype, $Gvar, $Gexp, $CaseList, $StartTime, $TimeInc, $Ptime,
                                    $Ptstart, $Ptend,$Gdir, $Pdir, $PfileCase);
  
            if ($Ptype eq "AZ")
              {
              $Z1 = $$Plots{$Ptype}{VARS}{$Gvar}{ZBOT};
              $Z2 = $$Plots{$Ptype}{VARS}{$Gvar}{ZTOP};
              &DiagUtils::PlotGradsVslice($Gvar, $$Gfiles[0], $TimeStep, $Z1, $Z2,
                $Ccols, $Clevs, $Ptitle, $Xtitle, $Ytitle, $Pfile);
              }
            elsif ($Ptype eq "HS")
              {
              &DiagUtils::PlotGradsHslice($Gvar, $$Gfiles[0], $TimeStep,
                $Ccols, $Clevs, $Ptitle, $Xtitle, $Ytitle, $Pfile);
              }
            }
          }
        elsif ($Ptype eq "TS")
          {
          $Ptime = 0;
          $PfileCase = $Case;
          if ($Gvar =~ /_dt$/)
            {
            # "rates" data - comes up one shorter than non rates data
            $Ptend = $$Plots{PTEND} - 1;
            }
          else
            {
            $Ptend = $$Plots{PTEND};
            }
  
          ($Clevs, $Ccols, $Ptitle, $Xtitle, $Ytitle, $TimeStep, $TstepStart, $TstepEnd, $Gfiles, $Pfile) =
              &SetGradsPlotParams($Ptype, $Gvar, $Gexp, $CaseList, $StartTime, $TimeInc, $Ptime,
                                  $Ptstart, $Ptend, $Gdir, $Pdir, $PfileCase);
  
          $TavgLen = $$Plots{$Ptype}{VARS}{$Gvar}{TAVGLEN};
          $Ymin    = $$Plots{$Ptype}{VARS}{$Gvar}{YMIN};
          $Ymax    = $$Plots{$Ptype}{VARS}{$Gvar}{YMAX};
          &DiagUtils::PlotGradsTseries($Gvar, $Gfiles, $CaseList, $TstepStart, $TstepEnd, $TavgLen,
            $Ymin, $Ymax, $Ptitle, $Xtitle, $Ytitle, $Xlgd, $Ylgd, $Pfile);
          }
        }
      }
    }
  elsif ($Ptype eq "TSM")
    {
    foreach $PfileCase (sort(keys(%{ $$Plots{"TSM"} })))
      {
      foreach $Gvar (sort(keys(%{ $$Plots{"TSM"}{$PfileCase} })))
        {
        $Xlgd    = $$Plots{"TSM"}{$PfileCase}{$Gvar}{XLGD};
        $Ylgd    = $$Plots{"TSM"}{$PfileCase}{$Gvar}{YLGD};
  
        # look up specs in "TS" section
        # note this section depends on $Gvar being defined with a TsPlotVar: line
        # in the diagnostic config file
        $TavgLen = $$Plots{"TS"}{VARS}{$Gvar}{TAVGLEN};
        $Ymin    = $$Plots{"TS"}{VARS}{$Gvar}{YMIN};
        $Ymax    = $$Plots{"TS"}{VARS}{$Gvar}{YMAX};
        @$CaseList = ( @{ $$Plots{"TSM"}{$PfileCase}{$Gvar}{CASES} } );
  
        $Ptime = 0;
        $Ptend = $$Plots{PTEND};
  
        ($Clevs, $Ccols, $Ptitle, $Xtitle, $Ytitle, $TimeStep, $TstepStart, $TstepEnd, $Gfiles, $Pfile) =
            &SetGradsPlotParams($Ptype, $Gvar, $Gexp, $CaseList, $StartTime, $TimeInc, $Ptime,
                                $Ptstart, $Ptend, $Gdir, $Pdir, $PfileCase);
  
        &DiagUtils::PlotGradsTseries($Gvar, $Gfiles, $CaseList, $TstepStart, $TstepEnd, $TavgLen,
            $Ymin, $Ymax, $Ptitle, $Xtitle, $Ytitle, $Xlgd, $Ylgd, $Pfile);
        }
      }
    }
  }

exit 0;
