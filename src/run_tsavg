#!/usr/bin/env perl
#
# Script to run tsavg on the set of cases specified in the config file
#
# The config file defines the cases, time dirs and diagnostics that are to be run. Format
# for lines in the config file are:
#   Case: <CaseName>
#   TimeDir: <Dir> <TimeSpec>
#   Diag: tsavg <TsavgArgs>
#
#   <CaseName> corresponds to the simulation name such as TC_SEED_C0100 or SA0SC0.
#
#   <Dir> is a subdirectory of the <CaseName>/GRADS directory where the GRADS files live
#   <TimeSpec> is the revu time spec (in the TVAR(1) spec)
#

BEGIN { push(@INC, "$ENV{HOME}/etc/perl"); }

use strict;
use File::Basename;
use DiagUtils;

#######################################################################
# SUBROUTINES
#######################################################################

#######################################################################
# CreateFileNames()
#
# This routine will take the case, time dir, and diagnostic name
# and create the file lists (input and output) needed for tsavg.
#
sub CreateFileNames
  {
  my ($Case, $Tdir, $Dname, $FfilePrefix, $AzavgDir, $TsavgDir, $FilterDir) = @_;
  
  my $InDir;
  my $InFileSuffix;
  my $OutFile;
  my $FilterFile;

  my $Pattern;
  my @f;

  # InDir is the directory that the input files come from.
  #
  # InFileSuffix is used to create the names of all the input files. It is
  # assumed that the input file names follow the form:
  #
  #   <VarName><InFileSuffix>
  #
  # OutFile is simply the whole path to the output file.
  #
  if ($Dname eq "max_azwind")
    {
    $InDir = $AzavgDir . "/" . $Tdir;
    $InFileSuffix = "_" . $Case . ".h5";
    }
  else
    {
    $InDir = $Case . "/HDF5/" . $Tdir;
    # Use the w input file as a sample for finding the input file suffix.
    $Pattern = $InDir . "/w-*.h5";
    @f = glob($Pattern);
    $InFileSuffix = $f[0];
    $InFileSuffix =~ s/.*\/w-/-/;
    }

  $OutFile = $TsavgDir . "/" . ${Tdir} . "/" . ${Dname} . "_" . ${Case} . ".h5";
  $FilterFile = $FilterDir . "/" . ${Tdir} . "/" . ${FfilePrefix} . "_" . ${Case} . ".h5";

  return ($InDir, $InFileSuffix, $OutFile, $FilterFile);
  }

#######################################################################
# MAIN
#######################################################################

my $ConfigFile;

my $Config;

my %Cases;
my %TimeDirs;
my %TsavgDiags;
my $AzavgDir;
my $TsavgDir;
my $FilterDir;

my @f;
my $Case;
my $Tdir;
my $Dname;
my $RevuVar;
my $MaxRadius;
my $VarDim;
my $Nbands;
my $Wmin;
my $Wmax;
my $InDir;
my $InFileSuffix;
my $OutFile;
my $FilterFile;
my $FfilePrefix;

my @SysArgs;
my $OutDir;
my $JoinInFiles;
my $JoinOutFile;

$ConfigFile = $ARGV[0];

# read in info from the config file
($Config) = &DiagUtils::ReadConfigFile($ConfigFile);

%Cases = %{ $$Config{CASES} };
%TimeDirs = %{ $$Config{TIM_DIRS} };
%TsavgDiags = %{ $$Config{TSAVG_DIAGS} };

$AzavgDir = $$Config{AZAVG_DIR};
$TsavgDir = $$Config{TSAVG_DIR};
$FilterDir = $$Config{FILTER_DIR};

# make sure at least one of each of cases, time_directories and diagnostics has
# been specified
if ((! (%Cases)) || (! (%TimeDirs)) || (! (%TsavgDiags)))
  {
  print STDERR "ERROR: must specify at least one of each of case, time directory and diagnostic\n";
  exit 1;
  }

# Walk through all combinations of cases, time directories, and diagnostics.
foreach $Case (sort(keys(%Cases)))
  {
  foreach $Dname (sort(keys(%TsavgDiags)))
    {
    $JoinInFiles = "";

    # Grab the filter 
    $FfilePrefix = $TsavgDiags{$Dname}{FILTER};

    # run through each time directory generating the current diagnostic, and
    # then join these files into the main file (above the time directories)
    foreach $Tdir (sort(keys(%TimeDirs)))
      {
      ($InDir,$InFileSuffix,$OutFile,$FilterFile) =
          &CreateFileNames($Case, $Tdir, $Dname, $FfilePrefix, $AzavgDir, $TsavgDir, $FilterDir);

      print "***************************************************************\n";
      print "Running tsavg:\n";
      print "  Case: $Case\n";
      print "  Time Directory: $Tdir\n";
      print "  Tsavg Diagnostic: $Dname\n";
      print "  Input File Directory: $InDir\n";
      print "  Input File Suffix: $InFileSuffix\n";
      print "  Filter File: $FilterFile\n";
      print "  Output File: $OutFile\n";

      # run tsavg, make sure the output directory exists
      $OutDir = dirname($OutFile);
      if (! -d $OutDir)
        {
        @SysArgs = ("mkdir", "-p", $OutDir);
        system(@SysArgs);
        }

      @SysArgs = ("tsavg", $InDir, $InFileSuffix, $OutFile, $Dname, $FilterFile);
      print "Running: ", join(" ",@SysArgs), "\n\n";
      system(@SysArgs);

      # record the input file for the upcoming join
      if ($JoinInFiles eq "")
        {
        $JoinInFiles = $OutFile;
        $JoinOutFile = $TsavgDir . "/" . basename($OutFile);
        }
      else
        {
        $JoinInFiles = $JoinInFiles . ":" . $OutFile;
        }
      }

    @SysArgs = ("join_hdata", $JoinInFiles, $JoinOutFile, $Dname);
    print "***************************************************\n";
    print " Joining HDF5 data:\n";
    print "   Input Files: $JoinInFiles\n";
    print "   Output File: $JoinOutFile\n";
    print "   GRADS Variable: $Dname\n";
    print "Running: ", join(" ",@SysArgs), "\n\n";
    system(@SysArgs);
    }
  }

exit 0;
