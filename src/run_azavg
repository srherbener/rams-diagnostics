#!/usr/bin/env perl
#
# Script to run azavg on the set of diagnostics specified in the config file
#
# The config file defines the cases, time dirs and diagnostics that are to be run. Format
# for lines in the config file are:
#   Case: <CaseName>
#   TimeDir: <Dir> <TimeSpec>
#   Azavg: <Diagnostic> <Nbands> <wfilterMin> <WfilterMax>
#
#   <CaseName> corresponds to the simulation name such as TC_SEED_C0100 or SA0SC0.
#
#   <Dir> is a subdirectory of the <CaseName>/GRADS directory where the GRADS files live
#   <TimeSpec> is the revu time spec (in the TVAR(1) spec)
#
#   <Diagnositc> is the name of the azavg function
#   <Nbands> is the number of radial bands to divide the space into
#   <WfilterMin> is the lower limit on the w filter (take data points with w < WfilterMin>
#   <WfilterMax> is the upper limit on the w filter (take data points with w > WfilterMax>
#

BEGIN { push(@INC, "$ENV{HOME}/etc/perl"); }

use strict;
use File::Basename;
use DiagUtils;

#######################################################################
# SUBROUTINES
#######################################################################

#######################################################################
# CreateFileNames()
#
# This routine will take the case, time dir, and diagnostic name
# and create the file lists (input and output) needed for azavg.
#
sub CreateFileNames
  {
  my ($Case, $Tdir, $Adiag, $Fprefix, $AzavgDir, $FilterDir, $RevuDir) = @_;
  
  my $InDir;
  my $InFileSuffix;
  my $OutFile;
  my $FilterFile;

  my $Pattern;
  my @f;
  my $TdirStr;

  # If $Tdir is the string "NONE", then do not place a subdirectory
  # in the path to the input and output files
  if ($Tdir eq "NONE")
    {
    $TdirStr = "";
    }
  else
    {
    $TdirStr = "/" . $Tdir;
    }

  # InDir is the directory that the input files come from.
  #
  # InFileSuffix is used to create the names of all the input files. It is
  # assumed that the input file names follow the form:
  #
  #   <VarName><InFileSuffix>
  #
  # OutFile is simply the whole path to the output file.
  #
  $InDir = $Case . "/" . $RevuDir . $TdirStr;

  # Use the w input file as a sample for finding the input file suffix.
  $Pattern = $InDir . "/w-*.h5";
  @f = glob($Pattern);
  $InFileSuffix = $f[0];
  $InFileSuffix =~ s/.*\/w-/-/;
  
  $OutFile = $AzavgDir . ${TdirStr} . "/" . ${Adiag} . "_" . ${Case} . ".h5";
  $FilterFile = $FilterDir . ${TdirStr} . "/" . ${Fprefix} . "_" . ${Case} . ".h5";

  return ($InDir, $InFileSuffix, $OutFile, $FilterFile);
  }

#######################################################################
# MAIN
#######################################################################

my $ConfigFile;
my $Config;

my %Cases;
my %TimeDirs;
my %Vars;
my %AzavgDiags;
my $AzavgDir;
my $FilterDir;
my $RevuDir;

my @f;
my $Case;
my $Tdir;
my $Adiag;
my $Avar;
my $RevuVar;
my $VarDim;
my $Nbands;
my $Fprefix;
my $InDir;
my $InFileSuffix;
my $OutFile;
my $FilterFile;

my @SysArgs;
my $OutDir;
my $GradsControlFile;
my $JoinInFiles;
my $JoinOutFile;

$ConfigFile = $ARGV[0];

# read in info from the config file
($Config) = &DiagUtils::ReadConfigFile($ConfigFile);
%Cases      = %{ $$Config{CASES} };
%TimeDirs   = %{ $$Config{TIM_DIRS} };
%Vars       = %{ $$Config{VARS} };
%AzavgDiags = %{ $$Config{AZAVG_DIAGS} };
$AzavgDir = $$Config{AZAVG_DIR};
$FilterDir = $$Config{FILTER_DIR};
$RevuDir = $$Config{REVU_DIR};

# make sure at least one of each of cases, time_directories and diagnostics has
# been specified
if ((! (%Cases)) || (! (%TimeDirs)) || (! (%AzavgDiags)))
  {
  print STDERR "ERROR: must specify at least one of each of case, time directory and diagnostic\n";
  exit 1;
  }

# In all cases, except 'speed_t' and 'speed_r', <Diagnostic> matches the name of the
# variable that you want to average. Also, the variable name matches the prefix of the GRADS
# control file.
#
# Walk through all combinations of cases, time directories, and diagnostics.
foreach $Case (sort(keys(%Cases)))
  {
  foreach $Adiag (sort(keys(%AzavgDiags)))
    {
    $JoinInFiles = "";

    $Avar = $AzavgDiags{$Adiag}{VAR};
    $VarDim = $AzavgDiags{$Adiag}{DIM};
    $Nbands = $AzavgDiags{$Adiag}{NBANDS};
    $Fprefix = $AzavgDiags{$Adiag}{FILTER};

    if (($Avar eq "speed_t") || ($Avar eq "speed_r"))
      {
      # won't have a corresponding name in %Vars
      $RevuVar = "HorizSpeed";
      }
    else
      {
      $RevuVar = $Vars{$Avar}{REVU_VAR};
      }

    # run through each time directory generating the current diagnostic, and
    # then join these files into the main file (above the time directories)
    foreach $Tdir (sort(keys(%TimeDirs)))
      {
      ($InDir,$InFileSuffix,$OutFile,$FilterFile) =
          &CreateFileNames($Case, $Tdir, $Adiag,$Fprefix, $AzavgDir, $FilterDir, $RevuDir);

      print "***************************************************************\n";
      print "Running azavg:\n";
      print "  Case: $Case\n";
      print "  Time Directory: $Tdir\n";
      print "  Variable: $Avar\n";
      print "    Variable Dimension: $VarDim\n";
      print "    Number Radial Bands: $Nbands\n";
      print "    Filter File Name: $FilterFile\n";
      print "    Revu Variable Name: $RevuVar\n";
      print "  Input File Directory: $InDir\n";
      print "  Input File Suffix: $InFileSuffix\n";
      print "  Output File: $OutFile\n";

      # run azavg, make sure the output directory exists
      $OutDir = dirname($OutFile);
      if (! -d $OutDir)
        {
        @SysArgs = ("mkdir", "-p", $OutDir);
        system(@SysArgs);
        }

      @SysArgs = ("azavg", $InDir, $InFileSuffix, $OutFile, $FilterFile, $Nbands, $Avar, $RevuVar, $VarDim);
      system(@SysArgs);

      # record the input file for the upcoming join
      if ($Tdir eq "NONE")
        {
        $JoinInFiles = "NONE";
        }
      else
        {
        if ($JoinInFiles eq "")
          {
          $JoinInFiles = $OutFile;
          $JoinOutFile = $AzavgDir . "/" . basename($OutFile);
          }
        else
          {
          $JoinInFiles = $JoinInFiles . ":" . $OutFile;
          }
        }
      }

    if ($JoinInFiles ne "NONE")
      {
      @SysArgs = ("join_hdata", $JoinInFiles, $JoinOutFile, $Avar);
      print "***************************************************\n";
      print " Joining HDF5 data:\n";
      print "   Input Files: $JoinInFiles\n";
      print "   Output File: $JoinOutFile\n";
      print "   GRADS Variable: $Avar\n";
      system(@SysArgs);
      }
    }
  }

exit 0;
